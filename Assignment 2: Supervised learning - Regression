@https://replit.com/@AfternoonCoder/QuarrelsomeRoundApplicationprogram#main.py

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# function to Plot the regression line and actual data points
def plot_regression_line(X, y, model):
    plt.scatter(X, y, color='blue', label='Actual Data')
    plt.plot(X, model.predict(X), color='red', label='Regression Line')
    plt.xlabel('Height (cm)')
    plt.ylabel('Shoe Size')
    plt.title('Linear Regression - Height vs. Shoe Size')
    plt.legend()
    plt.show()
  
# Sample data
height = np.array([140, 150, 160, 170, 180]).reshape(-1, 1)
shoe_size = np.array([7, 8, 9, 10, 11])

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(height, shoe_size, test_size=0.2, random_state=42)

# Creating a linear regression model
model = LinearRegression()

# Training the model
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Predict shoe size for a new height
new_height = np.array([165]).reshape(-1, 1)
predicted_shoe_size = model.predict(new_height)
print("Predicted Shoe Size:", predicted_shoe_size[0])

# Plot the regression line and actual data points
plot_regression_line(height, shoe_size, model)
