######ProblemOfTheDay-09052023######
import numpy as np 
import pandas as pd

#Setting up the vectors
s1 = np.array([-10, 20, -10, -18])
s2 = np.array([10, 20, 0-1e-15, 3])
s3 = np.array([0, 3, 8, 17])
s4 = np.array([8, 17, 10, -16])
s5 = np.array([16, -16, -10, -18])

#Vector Length using the absloute of the square root of the sum of squared components
s1_Sqrt = np.power(s1[0],2)+ np.power(s1[1],2)+ np.power(s1[2],2)+ np.power(s1[3],2)
s1_Len = abs(np.sqrt(s1_Sqrt))
s2_Sqrt = np.power(s2[0],2)+ np.power(s2[1],2)+ np.power(s2[2],2)+ np.power(s2[3],2)
s2_Len = abs(np.sqrt(s2_Sqrt))
s3_Sqrt = np.power(s3[0],2)+ np.power(s3[1],2)+ np.power(s3[2],2)+ np.power(s3[3],2)
s3_Len = abs(np.sqrt(s3_Sqrt))
s4_Sqrt = np.power(s4[0],2)+ np.power(s4[1],2)+ np.power(s4[2],2)+ np.power(s4[3],2)
s4_Len = abs(np.sqrt(s4_Sqrt))
s5_Sqrt = np.power(s5[0],2)+ np.power(s5[1],2)+ np.power(s5[2],2)+ np.power(s5[3],2)
s5_Len = abs(np.sqrt(s5_Sqrt))

#Slope equation for each vector (y2-y1)/(x2-x1)
s1_Slope = (s1[3] - s1[1]) / (s1[2] - s1 [0])
s2_Slope = (s2[3] - s2[1]) / (s2[2] - s2 [0])
s3_Slope = (s3[3] - s3[1]) / (s3[2] - s3 [0])
s4_Slope = (s1[3] - s4[1]) / (s4[2] - s4 [0])
s5_Slope = (s1[3] - s5[1]) / (s5[2] - s5 [0])

#Finding the maximum and minimum y values
y_coordinates = np.array([s1[1], s1[3], s2[1], s2[3], s3[1], s3[3], s4[1], s4[3], s5[1], s5[3]])


#Creating a table using pandas data frame
table_header1 = ["","","","",""]
table_header2 = ["Vectors", "Length", "Slope"]
table_data = np.array([["s1", s1_Len, s1_Slope],
              ["s2", s2_Len, s2_Slope], 
              ["s3", s3_Len, s3_Slope], 
              ["s4", s4_Len, s4_Slope], 
              ["s5", s5_Len, s5_Slope]])

#Output
print(pd.DataFrame(table_data, table_header1,table_header2))
print("Max y coordinate is " , max(y_coordinates)) 
print("Min y coodrinate is " , min(y_coordinates))
